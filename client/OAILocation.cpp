/**
 * LocationIQ
 * LocationIQ provides flexible enterprise-grade location based solutions. We work with developers, startups and enterprises worldwide serving billions of requests everyday. This page provides an overview of the technical aspects of our API and will help you get started.
 *
 * OpenAPI spec version: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include "OAILocation.h"

#include "OAIHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace OpenAPI {

OAILocation::OAILocation(QString json) {
    init();
    this->fromJson(json);
}

OAILocation::OAILocation() {
    init();
}

OAILocation::~OAILocation() {
    this->cleanup();
}

void
OAILocation::init() {
    place_id = new QString("");
    m_place_id_isSet = false;
    licence = new QString("");
    m_licence_isSet = false;
    osm_type = new QString("");
    m_osm_type_isSet = false;
    osm_id = new QString("");
    m_osm_id_isSet = false;
    boundingbox = new QList<QString*>();
    m_boundingbox_isSet = false;
    lat = new QString("");
    m_lat_isSet = false;
    lon = new QString("");
    m_lon_isSet = false;
    display_name = new QString("");
    m_display_name_isSet = false;
    _class = new QString("");
    m__class_isSet = false;
    type = new QString("");
    m_type_isSet = false;
    importance = 0.0;
    m_importance_isSet = false;
    address = new OAIAddress();
    m_address_isSet = false;
    namedetails = new OAINamedetails();
    m_namedetails_isSet = false;
}

void
OAILocation::cleanup() {
    if(place_id != nullptr) { 
        delete place_id;
    }
    if(licence != nullptr) { 
        delete licence;
    }
    if(osm_type != nullptr) { 
        delete osm_type;
    }
    if(osm_id != nullptr) { 
        delete osm_id;
    }
    if(boundingbox != nullptr) { 
        auto arr = boundingbox;
        for(auto o: *arr) { 
            delete o;
        }
        delete boundingbox;
    }
    if(lat != nullptr) { 
        delete lat;
    }
    if(lon != nullptr) { 
        delete lon;
    }
    if(display_name != nullptr) { 
        delete display_name;
    }
    if(_class != nullptr) { 
        delete _class;
    }
    if(type != nullptr) { 
        delete type;
    }
    if(importance != nullptr) { 
        delete importance;
    }
    if(address != nullptr) { 
        delete address;
    }
    if(namedetails != nullptr) { 
        delete namedetails;
    }
}

OAILocation*
OAILocation::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
OAILocation::fromJsonObject(QJsonObject pJson) {
    ::OpenAPI::setValue(&place_id, pJson["place_id"], "QString", "QString");
    
    ::OpenAPI::setValue(&licence, pJson["licence"], "QString", "QString");
    
    ::OpenAPI::setValue(&osm_type, pJson["osm_type"], "QString", "QString");
    
    ::OpenAPI::setValue(&osm_id, pJson["osm_id"], "QString", "QString");
    
    
    ::OpenAPI::setValue(&boundingbox, pJson["boundingbox"], "QList", "QString");
    ::OpenAPI::setValue(&lat, pJson["lat"], "QString", "QString");
    
    ::OpenAPI::setValue(&lon, pJson["lon"], "QString", "QString");
    
    ::OpenAPI::setValue(&display_name, pJson["display_name"], "QString", "QString");
    
    ::OpenAPI::setValue(&_class, pJson["class"], "QString", "QString");
    
    ::OpenAPI::setValue(&type, pJson["type"], "QString", "QString");
    
    ::OpenAPI::setValue(&importance, pJson["importance"], "OAINumber", "OAINumber");
    
    ::OpenAPI::setValue(&address, pJson["address"], "OAIAddress", "OAIAddress");
    
    ::OpenAPI::setValue(&namedetails, pJson["namedetails"], "OAINamedetails", "OAINamedetails");
    
}

QString
OAILocation::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
OAILocation::asJsonObject() {
    QJsonObject obj;
    if(place_id != nullptr && *place_id != QString("")){
        toJsonValue(QString("place_id"), place_id, obj, QString("QString"));
    }
    if(licence != nullptr && *licence != QString("")){
        toJsonValue(QString("licence"), licence, obj, QString("QString"));
    }
    if(osm_type != nullptr && *osm_type != QString("")){
        toJsonValue(QString("osm_type"), osm_type, obj, QString("QString"));
    }
    if(osm_id != nullptr && *osm_id != QString("")){
        toJsonValue(QString("osm_id"), osm_id, obj, QString("QString"));
    }
    if(boundingbox->size() > 0){
        toJsonArray((QList<void*>*)boundingbox, obj, "boundingbox", "QString");
    }
    if(lat != nullptr && *lat != QString("")){
        toJsonValue(QString("lat"), lat, obj, QString("QString"));
    }
    if(lon != nullptr && *lon != QString("")){
        toJsonValue(QString("lon"), lon, obj, QString("QString"));
    }
    if(display_name != nullptr && *display_name != QString("")){
        toJsonValue(QString("display_name"), display_name, obj, QString("QString"));
    }
    if(_class != nullptr && *_class != QString("")){
        toJsonValue(QString("class"), _class, obj, QString("QString"));
    }
    if(type != nullptr && *type != QString("")){
        toJsonValue(QString("type"), type, obj, QString("QString"));
    }
    if((importance != nullptr) && (importance->isSet())){
        toJsonValue(QString("importance"), importance, obj, QString("OAINumber"));
    }
    if((address != nullptr) && (address->isSet())){
        toJsonValue(QString("address"), address, obj, QString("OAIAddress"));
    }
    if((namedetails != nullptr) && (namedetails->isSet())){
        toJsonValue(QString("namedetails"), namedetails, obj, QString("OAINamedetails"));
    }

    return obj;
}

QString*
OAILocation::getPlaceId() {
    return place_id;
}
void
OAILocation::setPlaceId(QString* place_id) {
    this->place_id = place_id;
    this->m_place_id_isSet = true;
}

QString*
OAILocation::getLicence() {
    return licence;
}
void
OAILocation::setLicence(QString* licence) {
    this->licence = licence;
    this->m_licence_isSet = true;
}

QString*
OAILocation::getOsmType() {
    return osm_type;
}
void
OAILocation::setOsmType(QString* osm_type) {
    this->osm_type = osm_type;
    this->m_osm_type_isSet = true;
}

QString*
OAILocation::getOsmId() {
    return osm_id;
}
void
OAILocation::setOsmId(QString* osm_id) {
    this->osm_id = osm_id;
    this->m_osm_id_isSet = true;
}

QList<QString*>*
OAILocation::getBoundingbox() {
    return boundingbox;
}
void
OAILocation::setBoundingbox(QList<QString*>* boundingbox) {
    this->boundingbox = boundingbox;
    this->m_boundingbox_isSet = true;
}

QString*
OAILocation::getLat() {
    return lat;
}
void
OAILocation::setLat(QString* lat) {
    this->lat = lat;
    this->m_lat_isSet = true;
}

QString*
OAILocation::getLon() {
    return lon;
}
void
OAILocation::setLon(QString* lon) {
    this->lon = lon;
    this->m_lon_isSet = true;
}

QString*
OAILocation::getDisplayName() {
    return display_name;
}
void
OAILocation::setDisplayName(QString* display_name) {
    this->display_name = display_name;
    this->m_display_name_isSet = true;
}

QString*
OAILocation::getClass() {
    return _class;
}
void
OAILocation::setClass(QString* _class) {
    this->_class = _class;
    this->m__class_isSet = true;
}

QString*
OAILocation::getType() {
    return type;
}
void
OAILocation::setType(QString* type) {
    this->type = type;
    this->m_type_isSet = true;
}

OAINumber*
OAILocation::getImportance() {
    return importance;
}
void
OAILocation::setImportance(OAINumber* importance) {
    this->importance = importance;
    this->m_importance_isSet = true;
}

OAIAddress*
OAILocation::getAddress() {
    return address;
}
void
OAILocation::setAddress(OAIAddress* address) {
    this->address = address;
    this->m_address_isSet = true;
}

OAINamedetails*
OAILocation::getNamedetails() {
    return namedetails;
}
void
OAILocation::setNamedetails(OAINamedetails* namedetails) {
    this->namedetails = namedetails;
    this->m_namedetails_isSet = true;
}


bool
OAILocation::isSet(){
    bool isObjectUpdated = false;
    do{
        if(place_id != nullptr && *place_id != QString("")){ isObjectUpdated = true; break;}
        if(licence != nullptr && *licence != QString("")){ isObjectUpdated = true; break;}
        if(osm_type != nullptr && *osm_type != QString("")){ isObjectUpdated = true; break;}
        if(osm_id != nullptr && *osm_id != QString("")){ isObjectUpdated = true; break;}
        if(boundingbox->size() > 0){ isObjectUpdated = true; break;}
        if(lat != nullptr && *lat != QString("")){ isObjectUpdated = true; break;}
        if(lon != nullptr && *lon != QString("")){ isObjectUpdated = true; break;}
        if(display_name != nullptr && *display_name != QString("")){ isObjectUpdated = true; break;}
        if(_class != nullptr && *_class != QString("")){ isObjectUpdated = true; break;}
        if(type != nullptr && *type != QString("")){ isObjectUpdated = true; break;}
        if(importance != nullptr && importance->isSet()){ isObjectUpdated = true; break;}
        if(address != nullptr && address->isSet()){ isObjectUpdated = true; break;}
        if(namedetails != nullptr && namedetails->isSet()){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

