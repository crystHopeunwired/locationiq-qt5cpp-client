/**
 * LocationIQ
 * LocationIQ provides flexible enterprise-grade location based solutions. We work with developers, startups and enterprises worldwide serving billions of requests everyday. This page provides an overview of the technical aspects of our API and will help you get started.
 *
 * OpenAPI spec version: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBalanceApi.h"
#include "OAIHelpers.h"
#include "OAIModelFactory.h"
#include "OAIQObjectWrapper.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIBalanceApi::OAIBalanceApi() {}

OAIBalanceApi::~OAIBalanceApi() {}

OAIBalanceApi::OAIBalanceApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
OAIBalanceApi::balance() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/balance.php");



    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker();
    OAIHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &OAIHttpRequestWorker::on_execution_finished,
            this,
            &OAIBalanceApi::balanceCallback);

    worker->execute(&input);
}

void
OAIBalanceApi::balanceCallback(OAIHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    OAIBalance* output = static_cast<OAIBalance*>(create(json, QString("OAIBalance")));
    auto wrapper = new OAIQObjectWrapper<OAIBalance*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit balanceSignal(output);
    } else {
        emit balanceSignalE(output, error_type, error_str);
        emit balanceSignalEFull(worker, error_type, error_str);
    }
}


}
